name: "CI"

on:
  push:
    branches:
      - main


jobs:
  build:
    env:
      POSTGRES_USER: ${{ secrets.DATABASE_USERNAME }}
      POSTGRES_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      POSTGRES_HOST: ${{ secrets.DATABASE_HOSTNAME }}
      POSTGRES_PORT: ${{ secrets.DATABASE_PORT }}
      POSTGRES_DB: ${{ secrets.DATABASE_NAME }}
      JWT_SECRET_KEY: ${{ secrets.SECRET_KEY }}
      ALGORITHM: ${{ secrets.ALGORITHM }}
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: test-user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      max-parallel: 4
      matrix:
        python-version: ["3.10"]

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Dependencies
        run: make install
      - name: Lint black
        run: make lint_black
      - name: Lint isort
        run: make lint_isort
      - name: Lint isort
        run: make lint_pylint
      - run: echo $POSTGRES_USER
      - run: echo $POSTGRES_PASSWORD
      - name: Run Tests
        run: make tests
        env:
          POSTGRES_USER: ${{ secrets.DATABASE_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          POSTGRES_HOST: ${{ secrets.DATABASE_HOSTNAME }}
          POSTGRES_PORT: ${{ secrets.DATABASE_PORT }}
          POSTGRES_DB: ${{ secrets.DATABASE_NAME }}
          JWT_SECRET_KEY: ${{ secrets.SECRET_KEY }}
          ALGORITHM: ${{ secrets.ALGORITHM }}
      - name: Test coverage artifacts
        uses: actions/upload-artifact@v3.1.2
        with:
          name: coverage
          path: coverage.xml